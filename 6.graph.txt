#include<iostream>
#include<stack>
#include<queue>
using namespace std;

//graph
int graph[10][10];
int Vertices , Edges;
int visited[10];

//create graph
void Create_Graph()
{
    cout << "\nEnter Number of Vertices : ";
    cin >> Vertices;
    cout << "\nEnter Number of Edges : ";
    cin >> Edges;
    int v1,v2;

    for(int i = 1 ; i <= Vertices ; i++)
    {
        for(int j = 1 ; j <= Vertices ; j++)
        {
            graph[i][j] = 0;
        }
        visited[i] = 0;
    }

    for(int i = 0 ; i < Edges ; i++)
    {
        cout << "\nFor Edge : "<< i+1;
        cout << "\nEnter Vertex 1 : ";
        cin >> v1;
        cout << "Enter Vertex 2 : ";
        cin >> v2;

        graph[v1][v2] = 1;
        graph[v2][v1] = 1;
    }
}

//Breadth First traversal
void BFS()
{
    for(int i = 1 ; i < Vertices ; i++)
    {
        visited[i] = 0;
    }

    int starting_vertex;
    cout << "\nEnter Starting Vertex for Traversal : ";
    cin >> starting_vertex;
    cout << "BFS Traversal : ";

    queue<int> q;
    q.push(starting_vertex);
    visited[starting_vertex] = 1;
    while(!q.empty())
    {
        int front = q.front();
        q.pop();
        cout << front;

        for(int j = 1; j <= Vertices ; j++)
            {
                if(graph[front][j] == 1 && visited[j] == 0)
                {
                    visited[j] = 1;
                    q.push(j);
                }
            }
        }
}

void DFS()
{
    stack<int> st;
    int starting_vertex;
    cout << "\nEnter Starting Vertex for Traversal : ";
    cin >> starting_vertex;

    for(int i = 1 ; i <= Vertices ; i++)
    {
        visited[i] = 0;
    }
    cout << "DFS Traversal : ";
    st.push(starting_vertex);
    while(!st.empty())
    {
        int front = st.top();
        st.pop();

        if(visited[front] == 0)
        {
            visited[front] = 1;
            cout << front;
        }

        for(int j = 1; j <= Vertices ; j++)
        {
            if(graph[front][j] == 1 && visited[j] == 0)
            {
                st.push(j);
            }
        }
    }
}


int main()
{
    Create_Graph();
    BFS();
    DFS();
    return 0;
}